{"version":3,"sources":["App/components/start/Login.js","App/components/start/Register.js","App.js","serviceWorker.js","index.js"],"names":["Login","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","this","fieldsError","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","passwordError","layout","onSubmit","Item","validateStatus","help","rules","required","message","prefix","type","style","color","placeholder","htmlType","disabled","Object","keys","some","field","React","Component","Form","create","name","Register","Header","Layout","Content","Footer","App","className","theme","mode","defaultSelectedKeys","lineHeight","key","to","exact","path","component","padding","textAlign","Boolean","window","location","hostname","match","AppWithRouter","withRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2ce49aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Icon, Input, Button } from 'antd';\r\n\r\nfunction hasErrors(fieldsError) {\r\n\treturn Object.keys(fieldsError).some((field) => fieldsError[field]);\r\n}\r\n\r\nclass Login extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\t// To disabled submit button at the beginning.\r\n\t\tthis.props.form.validateFields();\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.form.validateFields((err, values) => {\r\n\t\t\tif (!err) {\r\n\t\t\t\tconsole.log('Received values of form: ', values);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\r\n\r\n\t\t// Only show error after a field is touched.\r\n\t\tconst usernameError = isFieldTouched('username') && getFieldError('username');\r\n\t\tconst passwordError = isFieldTouched('password') && getFieldError('password');\r\n\t\treturn (\r\n\t\t\t<Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t<Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\r\n\t\t\t\t\t{getFieldDecorator('username', {\r\n\t\t\t\t\t\trules: [ { required: true, message: 'Scrie un nume de utilizator!' } ]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\tprefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\t\t\t\t\t\t\tplaceholder=\"Utilizator\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\r\n\t\t\t\t\t{getFieldDecorator('password', {\r\n\t\t\t\t\t\trules: [ { required: true, message: 'Scrie o parola!' } ]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\tprefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tplaceholder=\"Parola\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item>\r\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\r\n\t\t\t\t\t\tLog in\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t</Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form.create({ name: 'horizontal_login' })(Login);\r\n","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Icon, Input, Button } from 'antd';\r\n\r\nfunction hasErrors(fieldsError) {\r\n\treturn Object.keys(fieldsError).some((field) => fieldsError[field]);\r\n}\r\n\r\nclass Register extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\t// To disabled submit button at the beginning.\r\n\t\tthis.props.form.validateFields();\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.form.validateFields((err, values) => {\r\n\t\t\tif (!err) {\r\n\t\t\t\tconsole.log('Received values of form: ', values);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\r\n\r\n\t\t// Only show error after a field is touched.\r\n\t\tconst usernameError = isFieldTouched('username') && getFieldError('username');\r\n\t\tconst passwordError = isFieldTouched('password') && getFieldError('password');\r\n\t\treturn (\r\n\t\t\t<Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t<Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\r\n\t\t\t\t\t{getFieldDecorator('username', {\r\n\t\t\t\t\t\trules: [ { required: true, message: 'Scrie un nume de utilizator!' } ]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\tprefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\t\t\t\t\t\t\tplaceholder=\"Utilizator\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\r\n\t\t\t\t\t{getFieldDecorator('password', {\r\n\t\t\t\t\t\trules: [ { required: true, message: 'Scrie o parola!' } ]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\tprefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tplaceholder=\"Parola\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item validateStatus=\"\" help=\"\">\r\n\t\t\t\t\t{getFieldDecorator('tip', {\r\n\t\t\t\t\t\trules: [ { required: true, message: 'Scrie ceva care sa te ajute sa iti amintesti parola:' } ]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\tprefix={<Icon type=\"bulb\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\t\t\t\t\t\t\ttype=\"tip\"\r\n\t\t\t\t\t\t\tplaceholder=\"ex: anu nasterii\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item>\r\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\r\n\t\t\t\t\t\tInregistrare\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t</Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form.create({ name: 'horizontal_login' })(Register);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Login from './App/components/start/Login';\r\nimport Register from './App/components/start/Register';\r\nimport { Route, NavLink } from 'react-router-dom';\r\nimport { Layout, Menu } from 'antd';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Layout className=\"layout\">\r\n\t\t\t<Header>\r\n\t\t\t\t<div className=\"logo\" />\r\n\t\t\t\t<Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[ '1' ]} style={{ lineHeight: '64px' }}>\r\n\t\t\t\t\t<Menu.Item key=\"1\">\r\n\t\t\t\t\t\t<NavLink to=\"/\">Acasa</NavLink>\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t<Menu.Item key=\"2\">\r\n\t\t\t\t\t\t<NavLink to=\"/login\">Log in</NavLink>\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t<Menu.Item key=\"3\">\r\n\t\t\t\t\t\t<NavLink to=\"/register\">Inregistrare</NavLink>\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t</Menu>\r\n\t\t\t</Header>\r\n\t\t\t<nav>\r\n\t\t\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t\t\t<Route exact path=\"/register\" component={Register} />\r\n\t\t\t</nav>\r\n\t\t\t<Content style={{ padding: '3rem' }}>\r\n\t\t\t\t<div className=\"chenar\">Program SAW & PIPES</div>\r\n\t\t\t</Content>\r\n\t\t\t<Footer style={{ textAlign: 'center' }}>Saw & Pipes @2019</Footer>\r\n\t\t</Layout>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport { BrowserRouter as Router, withRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst AppWithRouter = withRouter(App);\r\n\r\nReactDOM.render(\r\n\t<Router>\r\n\t\t<AppWithRouter />\r\n\t</Router>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}